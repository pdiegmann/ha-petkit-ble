name: 🛠️ Release Helper - Alternative AI Release Generator

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'  # Also handle pre-release tags like v1.0.0-beta.1

permissions:
  contents: write
  issues: read
  pull-requests: read

jobs:
  alternative-release:
    runs-on: ubuntu-latest
    name: 🤖 Alternative AI Release Generation
    if: ${{ !cancelled() }}  # Run even if main workflow fails
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Parse Version
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Determine if pre-release
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "release_type=stable" >> $GITHUB_OUTPUT
          else
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "release_type=pre-release" >> $GITHUB_OUTPUT
          fi

      - name: 🔍 Analyze Repository Changes
        id: analysis
        run: |
          # Get previous tag
          PREV_TAG=$(git tag --sort=-version:refname | grep -v "^${{ steps.version.outputs.tag }}" | head -1)
          echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT
          
          if [ -z "$PREV_TAG" ]; then
            echo "first_release=true" >> $GITHUB_OUTPUT
            COMPARISON_RANGE=""
          else
            echo "first_release=false" >> $GITHUB_OUTPUT
            COMPARISON_RANGE="$PREV_TAG..${{ steps.version.outputs.tag }}"
          fi
          
          # Generate comprehensive change analysis
          if [ -n "$COMPARISON_RANGE" ]; then
            # Categorize commits
            git log --pretty=format:"%s" $COMPARISON_RANGE | grep -i "feat\|add\|new" > new_features.txt || touch new_features.txt
            git log --pretty=format:"%s" $COMPARISON_RANGE | grep -i "fix\|bug\|issue" > bug_fixes.txt || touch bug_fixes.txt  
            git log --pretty=format:"%s" $COMPARISON_RANGE | grep -i "perf\|optim\|improve" > performance.txt || touch performance.txt
            git log --pretty=format:"%s" $COMPARISON_RANGE | grep -i "break\|deprecat" > breaking.txt || touch breaking.txt
            git log --pretty=format:"%s" $COMPARISON_RANGE | grep -i "doc\|readme" > documentation.txt || touch documentation.txt
            
            # Get file changes by category  
            git diff --name-only $COMPARISON_RANGE | grep -E "\.(py|yaml|yml)$" > code_changes.txt || touch code_changes.txt
            git diff --name-only $COMPARISON_RANGE | grep -E "\.(md|rst|txt)$" > doc_changes.txt || touch doc_changes.txt
            git diff --name-only $COMPARISON_RANGE | grep -E "workflow|\.github" > workflow_changes.txt || touch workflow_changes.txt
            
            echo "commits_count=$(git rev-list --count $COMPARISON_RANGE)" >> $GITHUB_OUTPUT
            echo "files_changed=$(git diff --name-only $COMPARISON_RANGE | wc -l)" >> $GITHUB_OUTPUT
          else
            echo "commits_count=1" >> $GITHUB_OUTPUT
            echo "files_changed=0" >> $GITHUB_OUTPUT
          fi

      - name: 🎨 Generate Release Notes with Release Helper
        id: release_helper
        uses: google-github-actions/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: python
          package-name: petkit-ble
          changelog-types: |
            [
              {"type": "feat", "section": "✨ Features", "hidden": false},
              {"type": "fix", "section": "🐛 Bug Fixes", "hidden": false},
              {"type": "perf", "section": "⚡ Performance", "hidden": false},
              {"type": "docs", "section": "📚 Documentation", "hidden": false},
              {"type": "ci", "section": "🔧 CI/CD", "hidden": false},
              {"type": "refactor", "section": "♻️ Refactoring", "hidden": false}
            ]

      - name: 🧠 Enhanced AI Release Notes
        id: ai_notes
        uses: microsoft/AI-Inference@v1
        if: steps.release_helper.outcome != 'success'
        with:
          model: gpt-4o-mini
          prompt: |
            Generate professional release notes for PetKit W5 BLE MQTT v${{ steps.version.outputs.version }}.

            ## Project Overview:
            - Home Assistant integration for Petkit W5 water fountains
            - Bluetooth Low Energy (BLE) communication
            - Local control without cloud dependencies
            - Reliability-focused pet device automation

            ## Release Context:
            - Version: ${{ steps.version.outputs.version }} (${{ steps.version.outputs.release_type }})
            - Previous: ${{ steps.analysis.outputs.previous_tag }}
            - Commits: ${{ steps.analysis.outputs.commits_count }}
            - Files: ${{ steps.analysis.outputs.files_changed }}
            - First Release: ${{ steps.analysis.outputs.first_release }}

            ## Change Categories:
            New Features: $([ -s new_features.txt ] && cat new_features.txt || echo "None")
            Bug Fixes: $([ -s bug_fixes.txt ] && cat bug_fixes.txt || echo "None")  
            Performance: $([ -s performance.txt ] && cat performance.txt || echo "None")
            Breaking Changes: $([ -s breaking.txt ] && cat breaking.txt || echo "None")
            Documentation: $([ -s documentation.txt ] && cat documentation.txt || echo "None")

            ## File Changes:
            Code: $([ -s code_changes.txt ] && cat code_changes.txt | wc -l || echo "0") files
            Docs: $([ -s doc_changes.txt ] && cat doc_changes.txt | wc -l || echo "0") files
            Workflows: $([ -s workflow_changes.txt ] && cat workflow_changes.txt | wc -l || echo "0") files

            Create comprehensive release notes with:
            1. Executive summary highlighting key improvements
            2. User-focused benefit descriptions
            3. Technical details for developers
            4. Installation/upgrade guidance
            5. Proper emoji usage and professional formatting
            6. Clear categorization of changes

            Format as GitHub Markdown suitable for Home Assistant users managing pet devices.

      - name: 🚀 Create Release
        uses: softprops/action-gh-release@v2
        if: ${{ !steps.release_helper.outputs.release_created }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "${{ steps.version.outputs.tag }} - PetKit BLE Integration"
          body: |
            ${{ steps.ai_notes.outputs.result || steps.release_helper.outputs.body || format('## Release {0}\n\nAutomated release for PetKit W5 BLE MQTT integration.\n\n### Changes\n- {1} commits\n- {2} files modified\n\n**Full Changelog**: https://github.com/pdiegmann/ha-petkit-ble/compare/{3}...{0}', steps.version.outputs.tag, steps.analysis.outputs.commits_count, steps.analysis.outputs.files_changed, steps.analysis.outputs.previous_tag) }}
          prerelease: ${{ steps.version.outputs.prerelease }}
          make_latest: ${{ steps.version.outputs.prerelease == 'false' }}
          generate_release_notes: false

      - name: 📊 Workflow Summary
        if: always()
        run: |
          echo "## 🎯 Release Workflow Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Version | ${{ steps.version.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type | ${{ steps.version.outputs.release_type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commits | ${{ steps.analysis.outputs.commits_count }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Files | ${{ steps.analysis.outputs.files_changed }} |" >> $GITHUB_STEP_SUMMARY
          echo "| First Release | ${{ steps.analysis.outputs.first_release }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Release Page](https://github.com/pdiegmann/ha-petkit-ble/releases/tag/${{ steps.version.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Repository](https://github.com/pdiegmann/ha-petkit-ble)" >> $GITHUB_STEP_SUMMARY