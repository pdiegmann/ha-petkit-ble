name: 🛠️ Release Helper - Alternative AI Release Generator

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'  # Also handle pre-release tags like v1.0.0-beta.1

permissions:
  contents: write
  issues: read
  pull-requests: read

jobs:
  alternative-release:
    runs-on: ubuntu-latest
    name: 🤖 Alternative AI Release Generation
    if: ${{ !cancelled() }}  # Run even if main workflow fails
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Parse Version
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Determine if pre-release
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "release_type=stable" >> $GITHUB_OUTPUT
          else
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "release_type=pre-release" >> $GITHUB_OUTPUT
          fi

      - name: 🔍 Analyze Repository Changes
        id: analysis
        run: |
          # Get previous tag
          PREV_TAG=$(git tag --sort=-version:refname | grep -v "^${{ steps.version.outputs.tag }}" | head -1)
          echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT
          
          if [ -z "$PREV_TAG" ]; then
            echo "first_release=true" >> $GITHUB_OUTPUT
            COMPARISON_RANGE=""
          else
            echo "first_release=false" >> $GITHUB_OUTPUT
            COMPARISON_RANGE="$PREV_TAG..${{ steps.version.outputs.tag }}"
          fi
          
          # Generate comprehensive change analysis
          if [ -n "$COMPARISON_RANGE" ]; then
            # Categorize commits
            git log --pretty=format:"%s" $COMPARISON_RANGE | grep -i "feat\|add\|new" > new_features.txt || touch new_features.txt
            git log --pretty=format:"%s" $COMPARISON_RANGE | grep -i "fix\|bug\|issue" > bug_fixes.txt || touch bug_fixes.txt  
            git log --pretty=format:"%s" $COMPARISON_RANGE | grep -i "perf\|optim\|improve" > performance.txt || touch performance.txt
            git log --pretty=format:"%s" $COMPARISON_RANGE | grep -i "break\|deprecat" > breaking.txt || touch breaking.txt
            git log --pretty=format:"%s" $COMPARISON_RANGE | grep -i "doc\|readme" > documentation.txt || touch documentation.txt
            
            # Get file changes by category  
            git diff --name-only $COMPARISON_RANGE | grep -E "\.(py|yaml|yml)$" > code_changes.txt || touch code_changes.txt
            git diff --name-only $COMPARISON_RANGE | grep -E "\.(md|rst|txt)$" > doc_changes.txt || touch doc_changes.txt
            git diff --name-only $COMPARISON_RANGE | grep -E "workflow|\.github" > workflow_changes.txt || touch workflow_changes.txt
            
            echo "commits_count=$(git rev-list --count $COMPARISON_RANGE)" >> $GITHUB_OUTPUT
            echo "files_changed=$(git diff --name-only $COMPARISON_RANGE | wc -l)" >> $GITHUB_OUTPUT
          else
            echo "commits_count=1" >> $GITHUB_OUTPUT
            echo "files_changed=0" >> $GITHUB_OUTPUT
          fi

      - name: 🎨 Generate Release with Release-Please
        id: release_please
        uses: google-github-actions/release-please-action@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: simple
          package-name: petkit-ble
        continue-on-error: true

      - name: 🧠 Generate Detailed Release Notes
        id: detailed_notes
        if: always()
        run: |
          cat > generate_detailed_notes.py << 'EOF'
          import os
          from datetime import datetime
          
          version = "${{ steps.version.outputs.version }}"
          tag = "${{ steps.version.outputs.tag }}"
          prev_tag = "${{ steps.analysis.outputs.previous_tag }}"
          commits_count = "${{ steps.analysis.outputs.commits_count }}"
          files_count = "${{ steps.analysis.outputs.files_changed }}"
          is_prerelease = "${{ steps.version.outputs.prerelease }}"
          release_type = "${{ steps.version.outputs.release_type }}"
          is_first = "${{ steps.analysis.outputs.first_release }}"
          
          # Read categorized changes
          def read_file_safe(filename):
              try:
                  with open(filename, 'r') as f:
                      return [line.strip() for line in f.readlines() if line.strip()]
              except:
                  return []
          
          features = read_file_safe('new_features.txt')
          fixes = read_file_safe('bug_fixes.txt')
          performance = read_file_safe('performance.txt')
          breaking = read_file_safe('breaking.txt')
          docs = read_file_safe('documentation.txt')
          
          # Read file changes
          code_changes = read_file_safe('code_changes.txt')
          doc_changes = read_file_safe('doc_changes.txt')
          workflow_changes = read_file_safe('workflow_changes.txt')
          
          # Generate comprehensive release notes
          status_emoji = "🧪" if is_prerelease == "true" else "✅"
          
          notes = f"""
          # 🚀 {tag} - PetKit BLE Integration Release
          
          {status_emoji} **{release_type.title()} Release** | 🏠 Home Assistant Integration | 📡 Bluetooth Low Energy Control
          
          > 🐾 **For pet owners**: Advanced local control of Petkit W4/W5/CTW2 water fountains through Home Assistant
          
          ## 📊 Release Metrics
          
          | Component | Count | Type | Details |
          |-----------|-------|------|----------|
          | **Version** | `{version}` | {release_type.title()} | {'First release' if is_first == 'true' else f'Upgrade from `{prev_tag}`'} |
          | **Changes** | {commits_count} commits | Code & Docs | {files_count} files modified |
          | **Code Files** | {len(code_changes)} | Python/YAML | Core functionality updates |
          | **Documentation** | {len(doc_changes)} | Markdown | User guides and API docs |
          | **Workflows** | {len(workflow_changes)} | CI/CD | Automation improvements |
          
          """
          
          # Add change sections
          if breaking:
              notes += "\n## ⚠️ Breaking Changes\n\n> 🔥 **Review Required**: These changes may affect existing installations\n\n"
              for change in breaking:
                  notes += f"- {change}\n"
          
          if features:
              notes += "\n## ✨ New Features & Capabilities\n\n"
              for feature in features:
                  notes += f"- {feature}\n"
          
          if performance:
              notes += "\n## ⚡ Performance & Reliability\n\n> 🎯 **Focus**: Enhanced BLE connectivity and device responsiveness\n\n"
              for perf in performance:
                  notes += f"- {perf}\n"
          
          if fixes:
              notes += "\n## 🐛 Bug Fixes & Stability\n\n"
              for fix in fixes:
                  notes += f"- {fix}\n"
          
          if docs:
              notes += "\n## 📚 Documentation & Automation\n\n"
              for doc in docs:
                  notes += f"- {doc}\n"
          
          # Add standard sections
          notes += f"""
          
          ## 🏠 Home Assistant Benefits
          
          ### 🔌 Integration Features
          - **Local BLE Control**: Direct device communication without cloud services
          - **Real-time Monitoring**: Live status updates for battery, filter, and water levels  
          - **Smart Automation**: Full HA automation support with device triggers
          - **Persistent Connection**: Automatic reconnection and error recovery
          - **Privacy First**: All data stays local - no cloud dependencies
          
          ### 🐾 Pet Care Automation
          - **Hydration Monitoring**: Track daily water consumption patterns
          - **Maintenance Alerts**: Automated filter and cleaning reminders
          - **Smart Scheduling**: LED control and DND mode automation
          - **Health Insights**: Battery monitoring and device health tracking
          
          ## 🛠️ Installation Guide
          
          ### Quick Start (HACS)
          ```bash
          # Add custom repository
          Repository: https://github.com/pdiegmann/ha-petkit-ble
          Category: Integration
          
          # Install and restart HA
          # Configure via Integrations page
          ```
          
          ### Manual Installation
          ```bash
          # Download and extract
          wget https://github.com/pdiegmann/ha-petkit-ble/archive/main.zip
          unzip main.zip
          
          # Copy to Home Assistant
          cp -r custom_components/petkit_ble /config/custom_components/
          
          # Restart and configure
          ```
          
          ## 🔧 Supported Hardware
          
          | Device Series | Status | Features | Notes |
          |---------------|--------|----------|-------|
          | **Petkit W4** | ✅ Full Support | All sensors, controls | Complete feature set |
          | **Petkit W5** | ✅ Full Support | All sensors, controls | Tested with Eversweet 2 Solo |
          | **Petkit CTW2** | ✅ Full Support | All sensors, controls | All variants supported |
          
          ## 📞 Support & Community
          
          ### 🔗 Quick Links
          - 📈 **[Changelog]({f'https://github.com/pdiegmann/ha-petkit-ble/compare/{prev_tag}...{tag}' if prev_tag else '#'})** - Detailed code changes
          - 📖 **[Documentation](https://github.com/pdiegmann/ha-petkit-ble#readme)** - Setup and troubleshooting
          - 🐛 **[Issues](https://github.com/pdiegmann/ha-petkit-ble/issues)** - Bug reports and features
          - 📦 **[HACS](https://github.com/pdiegmann/ha-petkit-ble)** - Easy installation
          
          ### 🌐 Community
          - 🏠 **[HA Community Forum](https://community.home-assistant.io/)** - General discussions
          - 💬 **[Discord](https://discord.gg/home-assistant)** - Real-time help
          - 🔗 **[Reddit](https://reddit.com/r/homeassistant)** - Tips and showcases
          
          ---
          
          **🌟 Love this integration?** Star the repository and share with fellow pet owners! 🐕🐱
          
          *Auto-generated on {datetime.now().strftime('%Y-%m-%d %H:%M UTC')} • Powered by GitHub Actions*
          """
          
          # Save and output
          with open('detailed_notes.md', 'w') as f:
              f.write(notes)
          
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"result<<EOF\n{notes}\nEOF\n")
          
          print("✅ Detailed release notes generated")
          EOF
          
          python generate_detailed_notes.py

      - name: 🔍 Detect Existing Release
        id: detect_release
        run: |
          if gh release view "${{ steps.version.outputs.tag }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "🔄 Release exists - backup system will update"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✨ No existing release - backup system will create"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🚀 Create or Update Release
        uses: softprops/action-gh-release@v2
        if: ${{ !steps.release_please.outputs.release_created }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "${{ steps.version.outputs.tag }} - PetKit BLE Integration"
          body: ${{ steps.detailed_notes.outputs.result }}
          prerelease: ${{ steps.version.outputs.prerelease }}
          make_latest: ${{ steps.version.outputs.prerelease == 'false' }}
          generate_release_notes: false
          fail_on_unmatched_files: false
          allowUpdates: true
          updateOnlyUnreleased: false

      - name: 📊 Workflow Summary
        if: always()
        run: |
          echo "## 🎯 Release Workflow Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Version | ${{ steps.version.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type | ${{ steps.version.outputs.release_type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commits | ${{ steps.analysis.outputs.commits_count }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Files | ${{ steps.analysis.outputs.files_changed }} |" >> $GITHUB_STEP_SUMMARY
          echo "| First Release | ${{ steps.analysis.outputs.first_release }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Release Page](https://github.com/pdiegmann/ha-petkit-ble/releases/tag/${{ steps.version.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Repository](https://github.com/pdiegmann/ha-petkit-ble)" >> $GITHUB_STEP_SUMMARY